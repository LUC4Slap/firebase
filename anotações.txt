-- Instalação --
npm install firebase

-- Buscar um Dado toda hora --
import React, {useState, useEffect} from 'react';
import {Text, View} from 'react-native';
import firebase from './src/config/firebaseConnection';
console.disableYellowBox = true;
export default function App() {
  const [nome, setNome] = useState('Carregando...');
  useEffect(() => {
    async function dados() {
      await firebase
        .database()
        .ref('nome')
        .on('value', (snapshot) => {
          setNome(snapshot.val());
        });
    }
    dados();
  }, []);
  return (
    <View style={{marginTop: 25}}>
      <Text style={{fontSize: 25}}>Olá {nome}</Text>
    </View>
  );
}

-- Buscar um Dado so uma vez --
export default function App() {
  const [nome, setNome] = useState('Carregando...');
  useEffect(() => {
    async function dados() {
      // await firebase
      //   .database()
      //   .ref('nome')
      //   .on('value', (snapshot) => {
      //     setNome(snapshot.val());
      //   });

      await firebase
        .database()
        .ref('nome')
        .once('value', (snapshot) => {
          setNome(snapshot.val());
        });
    }
    dados();
  }, []);
  return (
    <View style={{marginTop: 25}}>
      <Text style={{fontSize: 25}}>Olá {nome}</Text>
    </View>
  );
}

-- Buscar uma Coleção --
export default function App() {
  const [nome, setNome] = useState('Carregando...');
  const [idade, setIdade] = useState('Carregando...');
  useEffect(() => {
    async function dados() {
      await firebase
        .database()
        .ref('usuarios/1')
        .on('value', (snapshot) => {
          setNome(snapshot.val().nome);
          setIdade(snapshot.val().idade);
        });

      // await firebase
      //   .database()
      //   .ref('nome')
      //   .once('value', (snapshot) => {
      //     setNome(snapshot.val());
      //   });
    }
    dados();
  }, []);
  return (
    <View style={{marginTop: 25}}>
      <Text style={{fontSize: 25}}>Olá {nome}</Text>
      <Text style={{fontSize: 25}}>Idade {idade}</Text>
    </View>
  );
}

-- OPerações no Firebase --
export default function App() {
  const [nome, setNome] = useState('Carregando...');
  const [idade, setIdade] = useState('Carregando...');
  useEffect(() => {
    async function dados() {
      //Criar um nó | Para atualizar é so mudar o set mantendo o mesmo ref
      // await firebase.database().ref('tipo').set('Vendedor');

      // Deletar
      // await firebase.database().ref('tipo').remove();

      // Inserir um usuario em um nó
      // await firebase.database().ref('usuarios').child(3).set({
      //   nome: 'Henrique',
      //   cargo: 'Programador',
      // });

      // Atualizar sem excluir nenhum de uma lista com mais informções
      await firebase.database().ref('usuarios').child(3).update({
        nome: 'Jose Augusto',
      });
    }
    dados();
  }, []);
  return (
    <View style={{marginTop: 25}}>
      <Text style={{fontSize: 25}}>Olá {nome}</Text>
      <Text style={{fontSize: 25}}>Idade {idade}</Text>
    </View>
  );
}

-- Inserindo dados pelo App --
import React, {useState, useEffect} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  Button,
  Keyboard,
} from 'react-native';
import firebase from './src/config/firebaseConnection';
console.disableYellowBox = true;
export default function App() {
  const [nome, setNome] = useState('');
  const [cargo, setCargo] = useState('');
  async function cadastrar() {
    if (nome !== '' && cargo !== '') {
      let usuarios = await firebase.database().ref('usuarios');
      let chave = usuarios.push().key;
      usuarios.child(chave).set({
        nome: nome,
        cargo: cargo,
      });
      Keyboard.dismiss();
      alert('Cadastrado com Sucesso');
      setNome('');
      setCargo('');
    }
  }

  return (
    <View style={styles.container}>
      <Text style={styles.texto}>Nome</Text>
      <TextInput
        style={styles.input}
        underlineColorAndroid="transparent"
        onChangeText={(text) => setNome(text)}
        value={nome}
      />

      <Text style={styles.texto}>Cargo</Text>
      <TextInput
        style={styles.input}
        underlineColorAndroid="transparent"
        onChangeText={(text) => setCargo(text)}
        value={cargo}
      />
      <Button title="Cadastrar" onPress={cadastrar} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    margin: 10,
  },
  texto: {
    fontSize: 20,
  },
  input: {
    marginBottom: 10,
    padding: 10,
    borderWidth: 1,
    borderColor: '#121212',
    height: 45,
    fontSize: 17,
  },
});

-- Link api para memes --
https://imgflip.com/api

-- Cadastro e Listagem --
import React, {useState, useEffect} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  Button,
  Keyboard,
  FlatList,
  ActivityIndicator,
} from 'react-native';
import firebase from './src/config/firebaseConnection';
import Listagem from './src/components/Listagem';

console.disableYellowBox = true;

export default function App() {
  const [nome, setNome] = useState('');
  const [cargo, setCargo] = useState('');
  const [usuarios, setUsuarios] = useState([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    async function dados() {
      await firebase
        .database()
        .ref('usuarios')
        .on('value', (snapshot) => {
          setUsuarios([]);
          snapshot.forEach((childItem) => {
            let data = {
              key: childItem.key,
              nome: childItem.val().nome,
              cargo: childItem.val().cargo,
            };
            setUsuarios((oldArray) => [...oldArray, data].reverse());
          });
          setLoading(false);
        });
    }
    dados();
  }, []);

  async function cadastrar() {
    if (nome !== '' && cargo !== '') {
      let usuarios = await firebase.database().ref('usuarios');
      let chave = usuarios.push().key;
      usuarios.child(chave).set({
        nome: nome,
        cargo: cargo,
      });
      Keyboard.dismiss();
      alert('Cadastrado com Sucesso');
      setNome('');
      setCargo('');
    }
  }

  return (
    <View style={styles.container}>
      <Text style={styles.texto}>Nome</Text>
      <TextInput
        style={styles.input}
        underlineColorAndroid="transparent"
        onChangeText={(text) => setNome(text)}
        value={nome}
      />

      <Text style={styles.texto}>Cargo</Text>
      <TextInput
        style={styles.input}
        underlineColorAndroid="transparent"
        onChangeText={(text) => setCargo(text)}
        value={cargo}
      />
      <Button title="Cadastrar" onPress={cadastrar} />
      {loading ? (
        <ActivityIndicator color="#121212" size={45} />
      ) : (
        <FlatList
          data={usuarios}
          keyExtractor={(item) => item.key}
          renderItem={({item}) => <Listagem data={item} />}
        />
      )}
    </View>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    margin: 10,
  },
  texto: {
    fontSize: 20,
  },
  input: {
    marginBottom: 10,
    padding: 10,
    borderWidth: 1,
    borderColor: '#121212',
    height: 45,
    fontSize: 17,
  },
});

-- Autenticação (auth) --
